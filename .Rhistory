> x <- 3
> x <- 3
> x <- 3
> x <- 3
x <- 3
> x <- 4
x <- 33
numlist <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
?read.csv
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
library(jsonlite)
?fromJSON()
demo <- read.csv("~/R/R_Analysis/01_Demo/demo.json", header=FALSE)
View(demo)
demo <- read.csv("~/R/R_Analysis/01_Demo/demo.json", header=FALSE)
View(demo)
View(demo)
x[3]
> x[3]
x <- c(3, 3, 2, 2, 5, 5, 8, 8, 9)
x[3]
?sample()
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
library(tidyverse)
(library(tidyverse)
?mutate
?mutate()
?mutate()
> ?mutate()
?mutate()
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
library(tidyverse)
demo_table <- read.csv("~/R/R_Analysis/01_Demo/demo.csv")
View(demo_table)
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
View(demo_table)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
demo_table2 <- read.csv("~/R/R_Analysis/01_Demo/demo.json", header=FALSE)
View(demo_table2)
View(demo_table2)
View(demo_table2)
View(demo_table2)
View(demo_table2)
View(demo_table2)
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
?ggplot()
head(mpg)
plt + geom_bar() #plot a bar plot
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
View(demo_table)
View(demo_table2)
View(plt)
?geom_bar()
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
install.packages("tidyverse")
# Call the function with the student vector as an argument.
roll_call(students)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in students)
print(student)
}
# Call the function with the student vector as an argument.
roll_call(students)
sample(33,3)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in students) {
sample(33,3)
print(student)
}
}
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in students) {
combination <- sample(33,3)
print(student)
print (combination)
}
}
locker_combinations(students)
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
libary(ggplot)
library(ggplot)
install.packages("ggplot2", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
shapiro.test(mtcars$wt)
?t.test
library(dplyr)
#Dev3
#1
t.test(mechacar$PSI,mu=1500)
#Dev3
#1
t.test(suscoil$PSI,mu=1500)
# Import and read
mechacar <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# Import and read
mechacar <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
setwd("C:/Users/super/Documents/Personal-DESKTOP-347GCA7/Bootcamp/Git Hub/MechaCar_Statistical_Analysis")
# Import and read
mechacar <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
# Perform linear regression
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mechacar)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mechacar))
#Dev 2
#2
suscoil <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
#3
total_sum <- suscoil %>% summarize(PSI_mean=mean(PSI),
PSI_median=median(PSI),
PSI_var=var(PSI),
PSI_SD=sd(PSI),
.groups = 'keep')
#4
lot_sum <- suscoil %>% group_by(Manufacturing_Lot) %>% summarize(PSI_mean=mean(PSI),
PSI_median=median(PSI),
PSI_var=var(PSI),
PSI_SD=sd(PSI),
.groups = 'keep')
#Dev3
#1
t.test(suscoil$PSI,mu=1500)
rm(demo_table)
rm(demo_table2)
View(mpg_summary)
View(total_sum)
rm(locker_combinations, roll_call)
rm(students)
View(suscoil)
#2
lot1 <- subset(suscoil, manufacturing_lot=="Lot1")
View(lot_sum)
#2
lot1 <- subset(suscoil, Manufacturing_Lot=="Lot1")
lot2 <- subset(suscoil, Manufacturing_lot=="Lot2")
lot2 <- subset(suscoil, Manufacturing_Lot=="Lot2")
lot3 <- subset(suscoil, Manufacturing_Lot=="Lot3")
t.test(lot1$PSI, mu=1500)
t.test(lot2$PSI, mu=1500)
t.test(lot3$PSI, mu=1500)
